"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureCompatibleNpm = exports.getPackageManager = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
const semver_1 = require("semver");
const util_1 = require("util");
const workspace_schema_1 = require("../lib/config/workspace-schema");
const config_1 = require("./config");
const exec = (0, util_1.promisify)(child_process_1.exec);
async function supports(name) {
    try {
        await exec(`${name} --version`);
        return true;
    }
    catch {
        return false;
    }
}
async function hasLockfile(root, packageManager) {
    try {
        let lockfileName;
        switch (packageManager) {
            case workspace_schema_1.PackageManager.Yarn:
                lockfileName = 'yarn.lock';
                break;
            case workspace_schema_1.PackageManager.Pnpm:
                lockfileName = 'pnpm-lock.yaml';
                break;
            case workspace_schema_1.PackageManager.Npm:
            default:
                lockfileName = 'package-lock.json';
                break;
        }
        await fs_1.promises.access((0, path_1.join)(root, lockfileName), fs_1.constants.F_OK);
        return true;
    }
    catch {
        return false;
    }
}
async function getPackageManager(root) {
    const packageManager = await (0, config_1.getConfiguredPackageManager)();
    if (packageManager) {
        return packageManager;
    }
    const [hasYarnLock, hasNpmLock, hasPnpmLock] = await Promise.all([
        hasLockfile(root, workspace_schema_1.PackageManager.Yarn),
        hasLockfile(root, workspace_schema_1.PackageManager.Npm),
        hasLockfile(root, workspace_schema_1.PackageManager.Pnpm),
    ]);
    const hasYarn = await supports(workspace_schema_1.PackageManager.Yarn);
    if (hasYarn && hasYarnLock && !hasNpmLock) {
        return workspace_schema_1.PackageManager.Yarn;
    }
    const hasPnpm = await supports(workspace_schema_1.PackageManager.Pnpm);
    if (hasPnpm && hasPnpmLock && !hasNpmLock) {
        return workspace_schema_1.PackageManager.Pnpm;
    }
    const hasNpm = await supports(workspace_schema_1.PackageManager.Npm);
    if (hasNpm && hasNpmLock && !hasYarnLock && !hasPnpmLock) {
        return workspace_schema_1.PackageManager.Npm;
    }
    if (hasYarn && !hasNpm && !hasPnpm) {
        return workspace_schema_1.PackageManager.Yarn;
    }
    if (hasPnpm && !hasYarn && !hasNpm) {
        return workspace_schema_1.PackageManager.Pnpm;
    }
    // TODO: This should eventually inform the user of ambiguous package manager usage.
    //       Potentially with a prompt to choose and optionally set as the default.
    return workspace_schema_1.PackageManager.Npm;
}
exports.getPackageManager = getPackageManager;
/**
 * Checks if the npm version is a supported 7.x version.  If not, display a warning.
 */
async function ensureCompatibleNpm(root) {
    if ((await getPackageManager(root)) !== workspace_schema_1.PackageManager.Npm) {
        return;
    }
    try {
        const versionText = (0, child_process_1.execSync)('npm --version', { encoding: 'utf8', stdio: 'pipe' }).trim();
        const version = (0, semver_1.valid)(versionText);
        if (!version) {
            return;
        }
        if ((0, semver_1.satisfies)(version, '>=7 <7.5.6')) {
            // eslint-disable-next-line no-console
            console.warn(`npm version ${version} detected.` +
                ' When using npm 7 with the Angular CLI, npm version 7.5.6 or higher is recommended.');
        }
    }
    catch {
        // npm is not installed
    }
}
exports.ensureCompatibleNpm = ensureCompatibleNpm;
